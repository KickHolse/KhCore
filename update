# ─────────────────────────────────────────────────── #
#                    ██ ▄█▀  ██████                   #
#                    ██▄█▒ ▒██    ▒                   #
#                   ▓███▄░ ░ ▓██▄                     #
#                   ▓██ █▄   ▒   ██▒                  #
#                   ▒██▒ █▄▒██████▒▒                  #
#                   ▒ ▒▒ ▓▒▒ ▒▓▒ ▒ ░                  #
#                   ░ ░▒ ▒░░ ░▒  ░ ░                  #
#                   ░ ░░ ░ ░  ░  ░                    #
#                   ░  ░         ░                    #
# ─────────────────────────────────────────────────── #
options:
#	Nome: KhCore | Autor: Kiberzn
	version: 1.2

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────── #
# imports
import:
	org.bukkit.Sound
	org.bukkit.Material
	java.text.DecimalFormat
	java.text.DecimalFormatSymbols
	org.bukkit.material.MaterialData
	fr.mrmicky.fastparticle.FastParticle
	fr.mrmicky.fastparticle.ParticleType

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────── #
# events
on join:
	khcore_loadStats(player)
	khcore_roles_setup(player)
	khcore_notifyUpdate(player, "KhCore", "khcore", "86802", "{@version}", "khcore atualizar")

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────── #
# effects
effect [khcore] update[r] %player% %boolean% %text% %text%:
	trigger:
		expression 2 is true:
			send actionbar "&aConectando com o site..." to expression 1
			wait 2 second
			set {_percent1} to 90
			loop 90 times:
				add 1 to {_percent2}
				set {_percent} to {_percent2}/{_percent1}*100
				send actionbar "&aBaixando arquivo... &8(%{_percent}%%%)" to expression 1
				wait a tick
			delete file "plugins/Skript/scripts/%expression 4%.sk"
			download file from "https://raw.githubusercontent.com/KickHolse/%expression 3%/main/update" to file "plugins/Skript/scripts/%expression 4%.sk"
			reload script expression 4
			khcore_playSound(expression 1, ORB_PICKUP, 1, 5)
			send actionbar "&aAtualização instalada com sucesso!" to expression 1
			stop
		send "&cO skript se encontra em sua ultima versão." to expression 1
effect [khcore] down[load[er]]git[hub] %text% %text%:
	trigger:
		file "plugins/%expression 1%" doesn't exist:
			create file "plugins/%expression 1%"
			delete file "plugins/%expression 1%"
			download file from "%expression 2%" to file "plugins/%expression 1%"

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────── #
# expressions
expression %number% with decimal format %string%:
    return type: string
    get:
        return (new DecimalFormat(expr-2)).format(expr-1)
expression replacer %texts% with %texts% in %text%:
	return type: text
	get:
		set {_result} to expr-3
		loop exprs-1:
			add 1 to {_n}
			replace all "%loop-value-1%" with ({_n}th element of exprs-2 ? "") in {_result}
		return {_result}

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────── #
# commands
command /khcore [<text = help>]:
	permission: khcore.*
	permission message: §3[KhCore] §7v{@version} §f- §7Criado por §6Kick Holse§7.
	trigger:
		arg 1 == "help":
			send "%nl%&e  Ajuda - Core 1/1%nl% "
			send "&3 /khcore atualizar &f- &7Atualiza o skript%nl% "
		arg 1 == "atualizar":
			khcore update player {khcore::check_update} "KhCore" script

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────── #
# apis
function formatNumber(var: number) :: text:
    set {_x} to {_var} with decimal format "######,######"
    return "%{_x}%"
function khcore_downGithub(file: text, link: text):
	# tirar quando atualizar os sk que ainda esta usando
	khcore downgit "%{_file}%" "%{_link}%"
function khcore_update(p: player, var: text, name: text, sk: text):
	# tirar quando atualizar os sk que ainda esta usando
	khcore update {_p} {_var} {_name} {_sk}
function khcore_notifyUpdate(p: player, name: text, perm: text, id: text, v: text, cmd: text):
	text from "https://api.spigotmc.org/legacy/update.php?resource=%{_id}%" is not "%{_v}%":
		{_p} has permission "%{_perm}%.update" or "%{_perm}%.*":
			send "%nl%&3 [%{_name}%] &7There is a new skript update, click <tooltip:&bClick here to update.><command:/%{_cmd}%>&a&lHERE<reset> &7to update.%nl% " to {_p}
function khcore_playSound(p: player, sound: sound, v: number, w: number):
	{_p}.playSound(location of {_p}, Sound.."%{_sound}%", {_v} and {_w})
function khcore_getColor(str: String) :: color:
	set {split::*} to {_str} split at " : "
	loop {split::*}:
		if loop-value contains "color>":
			set {item::*} to loop-value split at ">"
			return {item::2} parsed as color
function khcore_getItem(str: String) :: material:
	set {_split::*} to {_str} split at " : "
	loop {_split::*}:
		if loop-value contains "item>":
			set {_item::*} to loop-value split at ">"
			if {_item::2} contains "UNBREAKABLE ":
				replace all "UNBREAKABLE " in {_item::2} with ""
				return unbreakable {_item::2} parsed as material
			if {_item::2} contains "SHINY ":
				replace all "SHINY " in {_item::2} with ""
				return shiny {_item::2} parsed as material
			if {_item::2} contains "BANNER:flag=":
				return black_banner_item with custom nbt (last element of {_item::2} split at "BANNER:flag=")
			if {_item::2} contains "HEAD:dono=":
				return skull of (last element of {_item::2} split at "HEAD:dono=" parsed as offlineplayer)
			if {_item::2} contains "HEAD:nbt=":
				set {_value} to last element of {_item::2} split at "HEAD:nbt="
				set {_x::*} to {_value} split at ":"
				set {_nbt} to "{SkullOwner:{Id:""%{_x::1}%"",Properties:{textures:[{Value:""%{_x::2}%""}]}}}"
				return player head with custom nbt "%{_nbt}%"
			return {_item::2} parsed as material
function khcore_getLore(str: String) :: string:
	set {split::*} to {_str} split at " : "
	loop {split::*}:
		if loop-value contains "desc>":
			set {item::*} to loop-value split at ">"
			replace all "\n" with "||" in {item::2}
			return colored {item::2}
function khcore_getName(str: String) :: string:
	set {split::*} to {_str} split at " : "
	loop {split::*}:
		if loop-value contains "nome>":
			set {item::*} to loop-value split at ">"
			return colored {item::2}
function khcore_getSlot(str: String) :: integer:
	set {split::*} to {_str} split at " : "
	loop {split::*}:
		if loop-value contains "slot>":
			set {item::*} to loop-value split at ">"
			return {item::2} parsed as int
function khcore_getText(p: player, var: text) :: text:
	replace all "{now}" in {_var} with "%now%"
	replace all "{khcore_group}" in {_var} with khcore_roles_getColoredGroup({_p})
	replace all "{khcore_colored}" in {_var} with khcore_roles_getColored({_p})
	replace all "{prefix}" in {_var} with khcore_roles_getPrefix({_p})
	replace all "{on}" in {_var} with "%number of all players%"
	replace all "{display}" in {_var} with khcore_roles_getPrefixed({_p})
	replace all "{player}" in {_var} with {_p}'s displayname
	return "%{_var}%"
on load:
    set {color-code} to "§, &"
    set {color-pattern} to "a, b, c, d, e, f, k, l, m, n, o, r, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0"
function khcore_getFirstColor(str: String) :: String:
    set {_codes::*} to {color-code} split at ", "
    loop {_codes::*}:
        set {_patterns::*} to {color-pattern} split at ", "
        loop {_patterns::*}:
            replace all "%loop-value-1%%loop-value-2%" in {_str} with "/start/%loop-value-1%%loop-value-2%/end/"
    if {_str} contains "/start/":
        set {_start::*} to {_str} split at "/start/"
        return first element of {_start::2} split at "/end/"
    else:
        return "§f"
function khcore_getLastColor(str: String) :: String:
    set {_codes::*} to {color-code} split at ", "
    loop {_codes::*}:
        set {_patterns::*} to {color-pattern} split at ", "
        loop {_patterns::*}:
            replace all "%loop-value-1%%loop-value-2%" in {_str} with "/start/%loop-value-1%%loop-value-2%/end/"
    if {_str} contains "/start/":
        set {_start} to last element of {_str} split at "/start/"
        return first element of {_start} split at "/end/"
    else:
        return "§f"
function khcore_stripColors(str: String) :: String:
	set {_codes::*} to {color-code} split at ", "
	loop {_codes::*}:
		set {_patterns::*} to {color-pattern} split at ", "
		loop {_patterns::*}:
			replace all "%loop-value-1%%loop-value-2%" in {_str} with ""
	return {_str}
function khcore_paintArmor(p: player, t: text):
	set {_string::*} to {_t} split at ", "
	loop 1 and 2 and 3:
		set {_%loop-value%} to {_string::%loop-value%} parsed as number
	dye {_p}'s helmet ({_1}, {_2}, {_3})
	dye {_p}'s chestplate ({_1}, {_2}, {_3})
	dye {_p}'s leggings ({_1}, {_2}, {_3})
	dye {_p}'s boots ({_1}, {_2}, {_3})
function khcore_getWorldOnline(str: String) :: int:
	set {_online} to 0
	loop all players:
		"%loop-player's world%" == {_str}:
			add 1 to {_online}
	return {_online}
function khcore_serializeLocation(unserialized: Location) :: String:
	return "%{_unserialized}'s world%, %{_unserialized}'s x-coordinate%, %{_unserialized}'s y-coordinate%, %{_unserialized}'s z-coordinate%, %{_unserialized}'s yaw%, %{_unserialized}'s pitch%"
function khcore_deserializeLocation(serialized: String) :: location:
	set {_xyz::*} to {_serialized} split at ", "
	set {_loc} to location at {_xyz::2} parsed as number, {_xyz::3} parsed as number, {_xyz::4} parsed as number of world "%{_xyz::1}%" parsed as world
	set {_loc}'s yaw to {_xyz::5} parsed as number
	set {_loc}'s pitch to {_xyz::6} parsed as number
	return {_loc}
function khcore_reverseValues(list: objects) :: objects:
	loop size of {_list::*} times:
		set {_index} to size of {_list::*} - loop-number - 1
		add {_list::%{_index}%} to {_reversed::*}
	return {_reversed::*}
function khcore_listContains(list: objects, search: object) :: boolean:
	loop {_list::*}:
		loop-value is {_search}:
			return true
	return false
function khcore_getFirstValue(list: objects) :: text:
	return {_list::1}
function khcore_getLastValue(list: objects) :: text:
	loop {_list::*}:
		add 1 to {_current}
		{_current} == size of {_list::*}:
			return loop-value
function khcore_getPercent(percent: int, of: int, symbol: boolean = false) :: text:
	set {_value} to (100 / {_of}) * {_percent}
	{_symbol} is true:
		return "%{_value}% %%"
	return "%{_value}%"
function khcore_blood(p: player):
	set {_w} to world of {_p}
	set {_loc} to location of {_p}
	set {_material} to new MaterialData(Material.."REDSTONE_BLOCK")
	FastParticle.spawnParticle({_w}, ParticleType.BLOCK_CRACK, {_loc}, 3 and {_material})
function khcore_loadStats(p: player):
	file "plugins/KhCore/players/%{_p}%.yml" doesn't exist:
		create file "plugins/KhCore/players/%{_p}%.yml"
		set yml value "%uuid of {_p}%.name" of file "plugins/KhCore/players/%{_p}%.yml" to {_p}'s displayname
		loop "build" and "players" and "lobby-protection":
			set yml value "%uuid of {_p}%.%loop-value%" of file "plugins/KhCore/players/%{_p}%.yml" to true
		set yml value "%uuid of {_p}%.email" of file "plugins/KhCore/players/%{_p}%.yml" to "none"
		set yml value "%uuid of {_p}%.login.first" of file "plugins/KhCore/players/%{_p}%.yml" to "%now%"
	set yml value "%uuid of {_p}%.login.last" of file "plugins/KhCore/players/%{_p}%.yml" to "%now%"

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────── #
# Role api
function khcore_roles_setup(p: player, tag: boolean = false):
	loop {roles::*}:
		"%{role::%loop-value%.permission}%" == "none":
			set {roleName.%{_p}%} to "%loop-value%"
			set {position.%{_p}%} to {role::%loop-value%.position}
			set {broadcast.%{_p}%} to {role::%loop-value%.broadcast}
		{_p} has permission "%{role::%loop-value%.permission}%":
			set {roleName.%{_p}%} to "%loop-value%"
			set {position.%{_p}%} to {role::%loop-value%.position}
			set {broadcast.%{_p}%} to {role::%loop-value%.broadcast}
		{_tag} == true:
			khcore_updateTag({_p})
function khcore_roles_getPos(str: String) :: int:
	return {roleName.%{_p}%}
function khcore_roles_getPosition(p: player) :: int:
	return {roleName.%{_p}%}
function khcore_roles_getRole(p: player) :: String:
	return {roleName.%{_p}%}
function khcore_roles_getPrefixed(p: player) :: String:
	set {_role} to khcore_roles_getRole({_p})
	set {_prefix} to "%{role::%{_role}%.prefix}%"
	return "%{_prefix}%%{_p}%"
function khcore_roles_getColored(p: player) :: String:
	set {_role} to khcore_roles_getRole({_p})
	set {_color} to khcore_getLastColor("%{role::%{_role}%.prefix}%")
	return "%{_color}%%{_p}%"
function khcore_roles_getColoredGroup(p: player) :: String:
	set {_role} to khcore_roles_getRole({_p})
	set {_color} to khcore_getLastColor("%{role::%{_role}%.prefix}%")
	return "%{_color}%%{role::%{_role}%.name}%"
function khcore_roles_getPrefix(p: player) :: String:
	set {_role} to khcore_roles_getRole({_p})
	return "%{role::%{_role}%.prefix}%"
function khcore_roles_getColor(p: player) :: String:
	set {_role} to khcore_roles_getRole({_p})
	set {_color} to khcore_getLastColor("%{role::%{_role}%.prefix}%")
	return "%{_color}%"
function khcore_updateTag(p: player):
	set {_prefix} to khcore_roles_getPrefix({_p})
	set {_color} to khcore_roles_getColor({_p})
	{_prefix} contains " ":
		make console execute command "nte player %{_p}% prefix %{_prefix}%%{_color}%"
	else:
		make console execute command "nte player %{_p}% prefix %{_prefix}%"
	make console execute command "nte player %{_p}% priority %{position.%{_p}%}%"

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────── #
# file manager
function khcore_filemanager(use: text):
	{_use} == "value":
		delete {roles::*}
		set {roles::*} to skutil yaml nodes "roles" from file "plugins/KhCore/roles.yml"
		set {_pos} to size of {roles::*}
		clear {role::*}
		loop {roles::*}:
			set {_role} to loop-value
			
			set {_name} to yaml value "roles.%{_role}%.name" from file "plugins/KhCore/roles.yml"
			set {_prefix} to yaml value "roles.%{_role}%.prefix" from file "plugins/KhCore/roles.yml"
			
			set {role::%{_role}%.position} to {_pos}
			set {role::%{_role}%.permission} to yaml value "roles.%{_role}%.permission" from file "plugins/KhCore/roles.yml"
			set {role::%{_role}%.broadcast} to yaml value "roles.%{_role}%.broadcast" from file "plugins/KhCore/roles.yml"
			set {role::%{_role}%.name} to colored {_name}
			set {role::%{_role}%.prefix} to colored {_prefix}
			
			remove 1 from {_pos}
	{_use} == "create":
		khcore downgit "KhCore/roles.yml" "https://raw.githubusercontent.com/KickHolse/KhCore/main/files/roles"
		khcore_filemanager("value")

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────── #
# load
load:
	khcore_filemanager("create")
	delete {khcore::check_update}
	wait a tick
	text from "https://api.spigotmc.org/legacy/update.php?resource=86802" != "{@version}":
		set {khcore::check_update} to true
		send "&3[KHCORE] &cYou are not using the latest version of skript" to console
	else:
		send "&3[KHCORE] &aYou are using the latest version of skript" to console
	send "&3[KHCORE] &aKhCore &8v{@version} &aenabled!" to console
