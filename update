# ─────────────────────────────────────────────────── #
#                    ██ ▄█▀  ██████                   #
#                    ██▄█▒ ▒██    ▒                   #
#                   ▓███▄░ ░ ▓██▄                     #
#                   ▓██ █▄   ▒   ██▒                  #
#                   ▒██▒ █▄▒██████▒▒                  #
#                   ▒ ▒▒ ▓▒▒ ▒▓▒ ▒ ░                  #
#                   ░ ░▒ ▒░░ ░▒  ░ ░                  #
#                   ░ ░░ ░ ░  ░  ░                    #
#                   ░  ░         ░                    #
# ─────────────────────────────────────────────────── #
options:
# Nome: KhCore | Autor: Kick Holse
  version: 1.2

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────── #
# imports
import:
  org.bukkit.Sound
  org.bukkit.Material
  java.text.DecimalFormat
  java.text.DecimalFormatSymbols
  org.bukkit.material.MaterialData
  fr.mrmicky.fastparticle.FastParticle
  fr.mrmicky.fastparticle.ParticleType
  java.io.File
  java.net.URL
  java.nio.file.Files
  java.nio.file.Paths
  java.nio.file.StandardCopyOption
  ch.njol.skript.ScriptLoader

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────── #
# events
join:
  khcore_LoadStatistics(player)
  khcore_roles_setup(player)
  khcore_notifyUpdate(player, "KhCore", "khcore", "86802", "{@version}", "khcore update")

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────── #
# effects
effect [khcore] download %string% to file %string%:
  trigger:
    file "%expr-2%" exists:
      set {_x} to 0
    else:
      create file "%expr-2%"
      delete file "%expr-2%"
      set {_in} to new URL(expr-1).openStream()
      Files.copy({_in}, Paths.get(expr-2) and StandardCopyOption.REPLACE_EXISTING)
      {_in}.close()
effect [khcore] update[r] %player% %boolean% %text% %text%:
  trigger:
    expr-2 is true:
      send actionbar "&aConectando com o site..." to expr-1
      wait 2 second
      set {_percent1} to 90
      loop 90 times:
        add 1 to {_percent2}
        set {_percent} to {_percent2}/{_percent1}*100
        send actionbar "&aBaixando arquivo... &8(%{_percent}%%%)" to expr-1
        wait a tick
      delete file "plugins/Skript/scripts/%expr-4%.sk"
      download "https://raw.githubusercontent.com/KickHolse/%expr-3%/main/update" to file "plugins/Skript/scripts/%expr-4%.sk"
      ScriptLoader.loadScripts(new File("plugins/Skript/scripts/%expr-4%.sk"))
      khcore_playSound(expr-1, ORB_PICKUP, 1, 5)
      send actionbar "&aAtualização instalada com sucesso!" to expr-1
      stop
    send "&cO skript se encontra em sua ultima versão." to expr-1

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────── #
# expressions
expression %number% with decimal format %string%:
    return type: string
    get:
        return (new DecimalFormat(expr-2)).format(expr-1)
expression replacer %texts% with %texts% in %text%:
    return type: text
    get:
        set {_result} to expr-3
        loop exprs-1:
            add 1 to {_n}
            replace all "%loop-value-1%" with ({_n}th element of exprs-2 ? "") in {_result}
        return {_result}

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────── #
# commands
command khcore [<text>]:
  permission: khcore.*
  permission message: §3[KhCore] §7v{@version} §f- §7Criado por §6Kick Holse§7.
  trigger:
    arg 1 is not "update":
      send "%nl%&e  Ajuda - Core%nl% "
      send "&3 /khcore update &f- &7Update the KhCore%nl% "
    arg 1 is "update":
      update player {khcore::check_update} "KhCore" script

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────── #
# gets insanos
function khcore_getItem(str: String) :: material:
  loop {_str} split at " : ":
    loop-value contains "item>":
      set {_item::*} to loop-value split at ">"
      {_item::2} contains "UNBREAKABLE ":
        return unbreakable last element of {_item::2} split at "UNBREAKABLE " parsed as material
      {_item::2} contains "SHINY ":
        return shiny last element of {_item::2} split at "SHINY " parsed as material
      {_item::2} contains "HEAD:dono=":
        return skull of last element of {_item::2} split at "HEAD:dono=" parsed as offlineplayer
      #{_item::2} contains "BANNER:flag=":
      #  return black_banner_item with custom nbt (last element of {_item::2} split at "BANNER:flag=")
      #{_item::2} contains "HEAD:nbt=":
      #  set {_value} to last element of {_item::2} split at "HEAD:nbt="
      #  set {_x::*} to {_value} split at ":"
      #  set {_nbt} to "{SkullOwner:{Id:""%{_x::1}%"",Properties:{textures:[{Value:""%{_x::2}%""}]}}}"
      #  return player head with custom nbt "%{_nbt}%"
      return {_item::2} parsed as material
function khcore_getName(str: String) :: string:
  loop {_str} split at " : ":
    loop-value contains "nome>":
      set {_name::*} to loop-value split at ">"
      return colored {_name::2}
function khcore_getLore(str: String) :: string:
  loop {_str} split at " : ":
    loop-value contains "desc>":
      set {_lore::*} to loop-value split at ">"
      return replacer "\n" with "||" in colored {_lore::2}
function khcore_getSlot(str: String) :: integer:
  loop {_str} split at " : ":
    loop-value contains "slot>":
      set {_slot::*} to loop-value split at ">"
      return {_slot::2} parsed as int

function khcore_getText(p: player, var: text) :: text:
  replace all "{khcore_group}" in {_var} with khcore_roles_getColoredGroup({_p})
  replace all "{khcore_colored}" in {_var} with khcore_roles_getColored({_p})
  replace all "{display}" in {_var} with khcore_roles_getPrefixed({_p})
  replace all "{prefix}" in {_var} with khcore_roles_getPrefix({_p})
  replace all "{now}" in {_var} with "%now%"
  replace all "{on}" in {_var} with "%number of all players%"
  replace all "{player}" in {_var} with {_p}'s displayname
  return colored {_var}
# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────── #
# numbers
function khcore_getPercent(percent: int, of: int, symbol: boolean = false) :: text:
    set {_value} to (100 / {_of}) * {_percent}
    {_symbol} is true:
        return "%{_value}% %%"
    return "%{_value}%"
function formatNumber(var: number) :: text:
  set {_x} to {_var} with decimal format "######,######"
  return "%{_x}%"

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────── #
# color apis
function khcore_getLastColor(str: String) :: String:
  set {_codes::*} to {color-code} split at ", "
  loop {_codes::*}:
    set {_patterns::*} to {color-pattern} split at ", "
    loop {_patterns::*}:
      replace all "%loop-value-1%%loop-value-2%" in {_str} with "/start/%loop-value-1%%loop-value-2%/end/"
  if {_str} contains "/start/":
    set {_start} to last element of {_str} split at "/start/"
    return first element of {_start} split at "/end/"
  else:
    return "§f"
function khcore_getFirstColor(str: String) :: String:
  set {_codes::*} to {color-code} split at ", "
  loop {_codes::*}:
    set {_patterns::*} to {color-pattern} split at ", "
    loop {_patterns::*}:
      replace all "%loop-value-1%%loop-value-2%" in {_str} with "/start/%loop-value-1%%loop-value-2%/end/"
  if {_str} contains "/start/":
    set {_start::*} to {_str} split at "/start/"
    return first element of {_start::2} split at "/end/"
  else:
    return "§f"
function khcore_stripColors(str: String) :: String:
  set {_codes::*} to {color-code} split at ", "
  loop {_codes::*}:
    set {_patterns::*} to {color-pattern} split at ", "
    loop {_patterns::*}:
      replace all "%loop-value-1%%loop-value-2%" in {_str} with ""
  return {_str}
function khcore_paintArmor(p: player, color: text):
  {_color} contains ",":
    set {_string::*} to {_color} split at ", "
    loop 1 and 2 and 3:
      set {_%loop-value%} to {_string::%loop-value%} parsed as number
    dye {_p}'s helmet ({_1}, {_2}, {_3})
    dye {_p}'s chestplate ({_1}, {_2}, {_3})
    dye {_p}'s leggings ({_1}, {_2}, {_3})
    dye {_p}'s boots ({_1}, {_2}, {_3})
  else:
    {_color} contains "##":
      send "erro" to {_p}
    else:
      dye {_p}'s helmet {_color} parsed as color
      dye {_p}'s chestplate {_color} parsed as color
      dye {_p}'s leggings {_color} parsed as color
      dye {_p}'s boots {_color} parsed as color

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────── #
# role system
function khcore_roles_setup(p: player, tag: boolean = false):
  set {_uuid} to uuid of {_p}
  loop {roles::*}:
    "%{role::%loop-value%.permission}%" is "none":
      set yaml value "%{_uuid}%.role" from file "plugins/KhCore/players/%{_uuid}%.yml" to "%loop-value%"
    {_p} has permission "%{role::%loop-value%.permission}%":
      set yaml value "%{_uuid}%.role" from file "plugins/KhCore/players/%{_uuid}%.yml" to "%loop-value%"
    {_tag} is true:
      khcore_updateTag({_p})
function khcore_roles_getPosition(p: player) :: int:
  set {_role} to khcore_roles_getRole({_p})
  return {role::%{_role}%.position}
function khcore_roles_getRole(p: player) :: String:
  set {_x} to yaml value "%uuid of {_p}%.role" from file "plugins/KhCore/players/%uuid of {_p}%.yml"
  return {_x}
function khcore_roles_getPrefixed(p: player) :: String:
  return "%khcore_roles_getPrefix({_p})%%{_p}%"
function khcore_roles_getColored(p: player) :: String:
  set {_role} to khcore_roles_getRole({_p})
  set {_color} to khcore_getLastColor("%{role::%{_role}%.prefix}%")
  return "%{_color}%%{_p}%"
function khcore_roles_getColoredGroup(p: player) :: String:
  set {_role} to khcore_roles_getRole({_p})
  set {_color} to khcore_getLastColor("%{role::%{_role}%.prefix}%")
  return "%{_color}%%{role::%{_role}%.name}%"
function khcore_roles_getPrefix(p: player) :: String:
  set {_role} to khcore_roles_getRole({_p})
  return "%{role::%{_role}%.prefix}%"
function khcore_roles_getColor(p: player) :: String:
  set {_color} to khcore_getLastColor(khcore_roles_getPrefix({_p}))
  return "%{_color}%"
function khcore_roles_isBroadcast(p: player) :: boolean:
  set {_role} to khcore_roles_getRole({_p})
  return {role::%{_role}%.broadcast}
function khcore_updateTag(p: player):
  set {_prefix} to khcore_roles_getPrefix({_p})
  {_prefix} contains " ":
    make console execute command "nte player %{_p}% prefix %{_prefix}%%khcore_roles_getColor({_p})% "
  else:
    make console execute command "nte player %{_p}% prefix %{_prefix}%"
  make console execute command "nte player %{_p}% priority %khcore_roles_getPosition({_p})%"

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────── #
# others
function khcore_notifyUpdate(p: player, name: text, perm: text, id: text, v: text, cmd: text):
  text from "https://api.spigotmc.org/legacy/update.php?resource=%{_id}%" is not "%{_v}%":
    {_p} has permission "%{_perm}%.update" or "%{_perm}%.*":
      send "%nl%&3 [%{_name}%] &7There is a new skript update, click <tooltip:&bClick here to update.><command:/%{_cmd}%>&a&lHERE<reset> &7to update.%nl% " to {_p}
function khcore_playSound(p: player, sound: sound, v: number, w: number):
  {_p}.playSound(location of {_p}, Sound.."%{_sound}%", {_v} and {_w})
function khcore_serializeLocation(unserialized: Location) :: String:
  return "%{_unserialized}'s world%, %{_unserialized}'s x-coordinate%, %{_unserialized}'s y-coordinate%, %{_unserialized}'s z-coordinate%, %{_unserialized}'s yaw%, %{_unserialized}'s pitch%"
function khcore_deserializeLocation(serialized: String) :: location:
  set {_xyz::*} to {_serialized} split at ", "
  set {_loc} to location at {_xyz::2} parsed as number, {_xyz::3} parsed as number, {_xyz::4} parsed as number of world "%{_xyz::1}%" parsed as world
  set {_loc}'s yaw to {_xyz::5} parsed as number
  set {_loc}'s pitch to {_xyz::6} parsed as number
  return {_loc}
function khcore_listContains(list: objects, search: object) :: boolean:
  loop {_list::*}:
    loop-value is {_search}:
      return true
  return false
function khcore_reverseValues(list: objects) :: objects:
  loop size of {_list::*} times:
    set {_index} to size of {_list::*} - loop-number - 1
    add {_list::%{_index}%} to {_reversed::*}
  return {_reversed::*}
function khcore_getFirstValue(list: objects) :: text:
  return {_list::1}
function khcore_getLastValue(list: objects) :: text:
  loop {_list::*}:
    add 1 to {_current}
    {_current} == size of {_list::*}:
      return loop-value
function khcore_getWorldOnline(str: String) :: int:
  set {_online} to 0
  loop all players:
    "%loop-player's world%" == {_str}:
      add 1 to {_online}
  return {_online}
function khcore_blood(p: player):
  set {_w} to world of {_p}
  set {_loc} to location of {_p}
  set {_material} to new MaterialData(Material.."REDSTONE_BLOCK")
  FastParticle.spawnParticle({_w}, ParticleType.BLOCK_CRACK, {_loc}, 3 and {_material})

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────── #
# file manager
function khcore_FileManager():
  download "https://raw.githubusercontent.com/KickHolse/KhCore/main/files/roles" to file "plugins/KhCore/roles.yml"
  yaml "khcore.roles" is loaded:
    unload yaml "khcore.roles"
  load yaml "plugins/KhCore/roles.yml" as "khcore.roles"
  delete {roles::*}
  set {roles::*} to yaml nodes with keys "roles" from "khcore.roles"
  set {_pos} to size of {roles::*}
  clear {role::*}
  loop {roles::*}:
    set {_role} to loop-value
    
    set {_name} to yaml value "roles.%{_role}%.name" from "khcore.roles"
    set {_prefix} to yaml value "roles.%{_role}%.prefix" from "khcore.roles"
    
    set {role::%{_role}%.position} to {_pos}
    set {role::%{_role}%.permission} to yaml value "roles.%{_role}%.permission" from "khcore.roles"
    set {role::%{_role}%.broadcast} to yaml value "roles.%{_role}%.broadcast" from "khcore.roles"
    set {role::%{_role}%.name} to colored {_name}
    set {role::%{_role}%.prefix} to colored {_prefix}
    
    remove 1 from {_pos}

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────── #
# functions
function khcore_LoadStatistics(p: player):
  file "plugins/KhCore/players/%uuid of {_p}%.yml" exists:
    set yaml value "%uuid of {_p}%.login.last" from file "plugins/KhCore/players/%uuid of {_p}%.yml" to "%now%"
  else:
    create file "plugins/KhCore/players/%uuid of {_p}%.yml"
    khcore_ResetStatistics({_p})
function khcore_ResetStatistics(p: player):
  set {_uuid} to uuid of {_p}
  set yaml value "%{_uuid}%.name" from file "plugins/KhCore/players/%{_uuid}%.yml" to {_p}'s displayname
  set yaml value "%{_uuid}%.role" from file "plugins/KhCore/players/%{_uuid}%.yml" to "default"
  set yaml value "%{_uuid}%.email" from file "plugins/KhCore/players/%{_uuid}%.yml" to "none"
  loop "build" and "players" and "lobby_protection":
    set yaml value "%{_uuid}%.%loop-value%" from file "plugins/KhCore/players/%{_uuid}%.yml" to true
  set yaml value "%{_uuid}%.login.first" from file "plugins/KhCore/players/%{_uuid}%.yml" to "%now%"
  set yaml value "%{_uuid}%.login.last" from file "plugins/KhCore/players/%{_uuid}%.yml" to "%now%"

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────── #
# load
load:
  set {color-code} to "§, &"
  set {color-pattern} to "a, b, c, d, e, f, k, l, m, n, o, r, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0"
  khcore_FileManager()
  delete {khcore::check_update}
  wait a tick
  text from "https://api.spigotmc.org/legacy/update.php?resource=86802" != "{@version}":
    set {khcore::check_update} to true
    send "&3[KHCORE] &cYou are not using the latest version of skript" to console
  else:
    send "&3[KHCORE] &aYou are using the latest version of skript" to console
  send "&3[KHCORE] &aKhCore &8v{@version} &aenabled!" to console
