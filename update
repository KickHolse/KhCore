# ─────────────────────────────────────────────────── #
#                    ██ ▄█▀  ██████                   #
#                    ██▄█▒ ▒██    ▒                   #
#                   ▓███▄░ ░ ▓██▄                     #
#                   ▓██ █▄   ▒   ██▒                  #
#                   ▒██▒ █▄▒██████▒▒                  #
#                   ▒ ▒▒ ▓▒▒ ▒▓▒ ▒ ░                  #
#                   ░ ░▒ ▒░░ ░▒  ░ ░                  #
#                   ░ ░░ ░ ░  ░  ░                    #
#                   ░  ░         ░                    #
# ─────────────────────────────────────────────────── #
options:
# KhCore | crafted by Kick Holse
  version: 1.3
# ─────────────────────────────────────────────────── #
import:
  java.io.File
  java.net.URL
  org.bukkit.Sound
  java.nio.file.Files
  java.nio.file.Paths
  java.text.DecimalFormat
  java.nio.file.StandardCopyOption
  org.bukkit.material.MaterialData
  fr.mrmicky.fastparticle.FastParticle
  fr.mrmicky.fastparticle.ParticleType

# ─────────────────────────────────────────────────── #
function serializeLocati(str: location) :: string:
  return "%{_str}'s world%, %{_str}'s x-coordinate%, %{_str}'s y-coordinate%, %{_str}'s z-coordinate%, %{_str}'s yaw%, %{_str}'s pitch%"
function deserializeLoca(str: string) :: location:
  set {_xyz::*} to {_str} split at ", "
  set {_loc} to location at {_xyz::2} parsed as number, {_xyz::3} parsed as number, {_xyz::4} parsed as number of world "%{_xyz::1}%" parsed as world
  set {_loc}'s yaw to {_xyz::5} parsed as number
  set {_loc}'s pitch to {_xyz::6} parsed as number
  return {_loc}
function deserializeItem(str: text, p: offlineplayer) :: material:
  {_str} is "":
    return air
  set {_sp::*} to {_str} split at " : "
  set {_item} to {_sp::1} parsed as material
  {_item} is a head:
    {_str} contains "dono>":
      set {_owner::*} to {_str} split at "dono>"
      set {_h} to {_owner::2}
      set {_owner} to first element of {_h} split at " "
      replace "{player}" with "%{_p}%" in {_owner}
      set {_item} to {_owner} parsed as offlineplayer's skull
  set {_amount} to {_sp::2} parsed as int
  {_amount} > 1:
    {_item}.setAmount({_amount})
  loop {_str} split at " : ":
    loop-value contains "nome>":
      set {_name::*} to loop-value split at ">"
      set {_name} to colored {_name::2}
    loop-value contains "desc>":
      set {_lore::*} to loop-value split at ">"
      replace all "\n" in {_lore::2} with "||"
      set {_lore} to colored {_lore::2}
    loop-value contains "pintar>":
      set {_p::*} to loop-value split at ">"
      set {_color} to colored {_p::2}
      dye {_item} (255, 255, 255)
    loop-value contains "encantar>":
      set {_enchants::*} to loop-value split at ">"
      set {_x} to {_enchants::2}
      "%{_enchants::2}%" contains "\n":
        loop {_x} split at "\n":
          set {_enc::*} to loop-value-2 split at ":"
          enchant {_item} with ("%{_enc::1}% %{_enc::2}%" parsed as enchantment type)
      else:
        set {_enc::*} to {_x} split at ":"
        enchant {_item} with ("%{_enc::1}% %{_enc::2}%" parsed as enchantment type)
  {_name} is set:
    set {_item} to {_item} named {_name}
  {_lore} is set:
    set {_item} to {_item} with lore {_lore}
  return {_item}
function fileExists(x: string) :: boolean:
  set {_x} to new File({_x})
  {_x}.exists():
    return true
effect download from %string% to file %string%:
  trigger:
    set {_in} to new URL(expr-1).openStream()
    Files.copy({_in}, Paths.get(expr-2) and StandardCopyOption)
    {_in}.close()
expression replacer %texts% with %texts% in %text%:
  return type: text
  get:
    set {_result} to expr-3
    loop exprs-1:
      add 1 to {_n}
      replace all "%loop-value-1%" with ({_n}th element of exprs-2 ? "") in {_result}
    return {_result}
expression %number% with decimal format %string%:
  return type: string
  get:
    return (new DecimalFormat(expr-2)).format(expr-1)
function formatNumber(var: number) :: text:
  set {_x} to {_var} with decimal format "######,######"
  return "%{_x}%"
expression last color from %string%:
  return type: string
  get:
    set {_str} to expr-1
    loop {color_code} split at ", ":
      loop {color_patterns} split at ", ":
        replace all "%loop-value-1%%loop-value-2%" in {_str} with "/start/%loop-value-1%%loop-value-2%/end/"
    {_str} contains "/start/":
      set {_start} to last element of {_str} split at "/start/"
      return first element of {_start} split at "/end/"
    else:
      return "§f"
expression first color from %string%:
  return type: string
  get:
    set {_str} to expr-1
    loop {color_code} split at ", ":
      loop {color_patterns} split at ", ":
        replace all "%loop-value-1%%loop-value-2%" in {_str} with "/start/%loop-value-1%%loop-value-2%/end/"
    {_str} contains "/start/":
      set {_start::*} to {_str} split at "/start/"
      return first element of {_start::2} split at "/end/"
    else:
      return "§f"
expression strip colors from %string%:
  return type: string
  get:
    set {_str} to expr-1
    loop {color_code} split at ", ":
      loop {color_patterns} split at ", ":
        replace all "%loop-value-1%%loop-value-2%" in {_str} with ""
    return {_str}
effect show blood at %player%:
  trigger:
    set {_w} to world of expr-1
    set {_loc} to location of expr-1
    set {_material} to new MaterialData(Material.."REDSTONE_BLOCK")
    FastParticle.spawnParticle({_w}, ParticleType.BLOCK_CRACK, {_loc}, 3 and {_material})
 
# ─────────────────────────────────────────────────── #
function khcore_sendHelp(p: player, var: objects, pl: text, pag: number = 1):
  set {_int} and {_page} to 1
  loop {_var::*}:
    set {_line::%{_int}%::%{_page}%} to loop-value
    add 1 to {_int} 
    {_int} = 7:   
      add 1 to {_page}
      set {_int} to 1
  {_line::1::%{_pag}%} is not set:
    send "&cA página &n%{_pag}%&c não foi encontrada!" to {_p}
    stop
  send "%nl%  &eHelp - %{_pl}% &e%{_pag}%&e/&e%{_page}%%nl% " to {_p}
  loop 5 times:
    {_line::%loop-number%::%{_pag}%} is set:
      send "%{_line::%loop-number%::%{_pag}%}%" to {_p}
  send newline to {_p}
function khcore_clear(p: player):
  heal {_p}
  extinguish {_p}
  clear {_p}'s level
  set {_p}'s food to 20
  clear {_p}'s inventory
  set {_p}'s max health to 10
  set {_p}'s fly mode to false
  set {_p}'s gamemode to adventure
  mgStats({_p}, "preferencies.build", "set", "boolean", "false")
  mgStats({_p}, "kitpvp.combatlog", "set", "boolean", "false")
  delete {chat_delay::%{_p}%} and {lasthit.%{lasthit.%{_p}%}%} and {lasthit.%{_p}%}
  loop "xp" and "kills" and "coins" and "levelcoins":
    delete {summary_%loop-value%::%{_p}%}
  loop ...{_p}.getActivePotionEffects():
    {_p}.removePotionEffect(loop-value.getType())

    #delete {kit_delay::%{_p}%} and {skill::invincible_%{_p}%} and {ninja_v::%{_p}%} and {ninja_t::%{_p}%} and {fisherman::%{_p}%}
    #remove wither and poison and blindness and speed and regeneration and jump boost and fire resistance and slowness and mining fatigue from {_p}
function khcore_text(p: offlineplayer, var: string) :: string:
  replace all "{khcore_coloredgroup}" in {_var} with khcore_roles({_p}, "get", "coloredgroup")
  replace all "{khcore_prefixed}" in {_var} with khcore_roles({_p}, "get", "prefixed")
  replace all "{khcore_prefix}" in {_var} with khcore_roles({_p}, "get", "prefix")
  replace all "{khcore_colored}" in {_var} with khcore_roles({_p}, "get", "colored")
  set {_kdr} to (mgStats({_p}, "kitpvp.kills", "get", "", "") parsed as number)/(mgStats({_p}, "kitpvp.deaths", "get", "", "") parsed as number)
  replace all "{khkits_kdr}" in {_var} with replacer "NaN" with "0" in "%{_kdr}%"
  loop "xp" and "reward" and "xp_to_next_level" and "level" and "kills" and "deaths" and "killstreak" and "coins":
    set {_x} to "%loop-value%"
    loop-value contains "level" or "xp" or "reward":
      set {_x} to "level.%loop-value%"
    replace all "{khkits_%loop-value%}" in {_var} with formatNumber(mgStats({_p}, "kitpvp.%{_x}%", "get", "", "") parsed as number)
  set {_now} to "%now%"
  replace all "{on}" in {_var} with "%number of all players%"
  replace all "{now}" in {_var} with "%now%"
  replace all "{date}" in {_var} with first element of {_now} split at " "
  return colored {_var}
function khcore_delayReplace(x: text) :: text:
  loop {_x} split at " ":
    loop-value contains ".":
      set {_y} to loop-value
      replace "%{_y}%" with first element of {_y} split at "." in {_x}
  replace all " minutes" and " minute" with "m" in {_x}
  replace all " seconds" and " second" with "s" in {_x}
  return replacer " hours" and " hour" and "and" with "hrs" and "h" and "e" in {_x}
effect play sound %string% with %number% and %number% to %player%:
  trigger:
    expr-4.playSound(location of expr-4, Sound.."%expr-1%", expr-2 and expr-3)

# ─────────────────────────────────────────────────── #
function loadStats(p: player):
  fileExists("plugins/KhCore/players/%uuid of {_p}%.yml") is true:
    set yaml value "%uuid of {_p}%.login.last" from file "plugins/KhCore/players/%uuid of {_p}%.yml" to "%now%"
  else:
    create file "plugins/KhCore/players/%uuid of {_p}%.yml"
    resetStats({_p})
function resetStats(p: player):
  set {_uuid} to uuid of {_p}
  mgStats({_p}, "name", "set", "text", {_p}'s displayname)
  mgStats({_p}, "role", "set", "text", "default")
  mgStats({_p}, "email", "set", "text", "none")
  mgStats({_p}, "kitpvp.selected_kit", "set", "text", "none")
  mgStats({_p}, "kitpvp.combatlog", "set", "boolean", "false")
  loop "killstreak" and "coins" and "kills" and "deaths":
    mgStats({_p}, "kitpvp.%loop-value%", "set", "number", "0")
  mgStats({_p}, "kitpvp.level.xp", "set", "number", "0")
  mgStats({_p}, "kitpvp.level.level", "set", "number", "1")
  mgStats({_p}, "kitpvp.level.reward", "set", "number", "500")
  mgStats({_p}, "kitpvp.level.xp_to_next_level", "set", "number", "100")
  loop yaml list "%uuid of {_p}%.kitpvp.kits" from file "plugins/KhCore/players/%uuid of {_p}%.yml":
    set {_x::*} to yaml list "%{_uuid}%.kitpvp.kits" from file "plugins/KhCore/players/%uuid of {_p}%.yml"
    size of {_x::*} > 1
    remove loop-value from yaml list "%{_uuid}%.kitpvp.kits" from file "plugins/KhCore/players/%uuid of {_p}%.yml"
  add "default" to yaml list "%{_uuid}%.kitpvp.kits" from file "plugins/KhCore/players/%uuid of {_p}%.yml"
  mgStats({_p}, "preferencies.build", "set", "boolean", "false")
  loop "players" and "lobby_protection":
    mgStats({_p}, "preferencies.%loop-value%", "set", "boolean", "true")
  loop "first" and "last":
    mgStats({_p}, "login.%loop-value%", "set", "text", "%now%")
function mgStats(p: player, key: text, mode: text, type: text, value: text) :: string:
  set {_uuid} to uuid of {_p}
  set {_var} to {_value}
  {_type} is "number":
    set {_var} to {_var} parsed as int
  {_type} is "boolean":
    set {_var} to {_var} parsed as boolean
  {_mode} is "set":
    set yaml value "%{_uuid}%.%{_key}%" from file "plugins/KhCore/players/%{_uuid}%.yml" to {_var}
  {_mode} is "reset":
    set {_raiz} to yaml value "%{_uuid}%.%{_key}%" from file "plugins/KhCore/players/%{_uuid}%.yml"
    {_raiz} is a number:
      set {_raiz} to 0
    {_raiz} is a text:
      set {_raiz} to "none"
    set yaml value "%{_uuid}%.%{_key}%" from file "plugins/KhCore/players/%{_uuid}%.yml" to {_raiz}
  {_mode} is "add":
    {_type} is "number"
    set {_raiz} to yaml value "%{_uuid}%.%{_key}%" from file "plugins/KhCore/players/%{_uuid}%.yml"
    add {_var} to {_raiz}
    {_raiz} > 99999999999:
      set {_raiz} to 99999999999
    set yaml value "%{_uuid}%.%{_key}%" from file "plugins/KhCore/players/%{_uuid}%.yml" to {_raiz}
  {_mode} is "remove":
    {_type} is "number"
    set {_raiz} to yaml value "%{_uuid}%.%{_key}%" from file "plugins/KhCore/players/%{_uuid}%.yml"
    remove {_var} from {_raiz}
    {_raiz} < 0:
      set {_raiz} to 0
    set yaml value "%{_uuid}%.%{_key}%" from file "plugins/KhCore/players/%{_uuid}%.yml" to {_raiz}
  {_mode} is "get":
    set {_var} to yaml value "%{_uuid}%.%{_key}%" from file "plugins/KhCore/players/%{_uuid}%.yml"
    return "%{_var}%"

# ─────────────────────────────────────────────────── #
effect setup role to %player% and %boolean%:
  trigger:
    loop yaml nodes with keys "roles" from "ks.core.roles":
      set {_perm} to yaml value "roles.%loop-value%.permission" from "ks.core.roles"
      "%{_perm}%" is "none":
        mgStats(expr-1, "role", "set", "text", loop-value)
      expr-1 has permission "%{_perm}%":
        mgStats(expr-1, "role", "set", "text", loop-value)
    expr-2 is true:
      khcore_roles(expr-1, "updatetag")
function khcore_roles(p: offlineplayer, type: text, find: text="default") :: text:
  {_type} is "position":
    set {_pos} to size of yaml nodes with keys "roles" from "ks.core.roles"
    loop yaml nodes with keys "roles" from "ks.core.roles":
      loop-value is {_find}:
        return {_pos}
      remove 1 from {_pos}
  {_type} is "get":
    set {_role} to "default"
    fileExists("plugins/KhCore/players/%uuid of {_p}%.yml") is true:
      set {_role} to mgStats({_p}, "role", "get", "", "")
    set {_prefix} to yaml value "roles.%{_role}%.prefix" from "ks.core.roles"
    set {_color} to last color from "%{_prefix}%"
    {_find} = "isbroadcasted":
      yaml value "roles.%{_role}%.broadcast" from "ks.core.roles" exists:
        set {_x} to yaml value "roles.%{_role}%.broadcast" from "ks.core.roles"
        return "%{_x}%"
    {_find} = "role":
      return "%{_role}%"
    {_find} = "coloredgroup":
      set {_name} to yaml value "roles.%{_role}%.name" from "ks.core.roles"
      return colored "%{_color}%%{_name}%"
    {_find} = "colored":
      return colored "%{_color}%%{_p}%"
    {_find} = "color":
      return colored "%{_color}%%{_p}%"
    {_find} = "prefix":
      return colored {_prefix}
    {_find} = "prefixed":
      return colored "%{_prefix}%%{_p}%"
  {_type} is "updatetag":
    loop "prefix" and "role":
      set {_%loop-value%} to khcore_roles({_p}, "get", "%loop-value%")
    set {_pos} to khcore_roles({_p}, "position", {_role})
    set {_color} to last color from "%{_prefix}%"
    {_prefix} contains " ":
      make console execute command "nte player %{_p}% prefix %{_prefix}%%{_color}% "
    else:
      make console execute command "nte player %{_p}% prefix %{_prefix}%"
    make console execute command "nte player %{_p}% priority %{_pos}%"

# ─────────────────────────────────────────────────── #
# events
join:
  loadStats(player)
  setup role to player and false

# ─────────────────────────────────────────────────── #
# load
load:
  set {color_code} to "§, &"
  set {color_patterns} to "a, b, c, d, e, f, k, l, m, n, o, r, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0"
  fileExists("plugins/KhCore/roles.yml") != true:
    create file "plugins/KhCore/roles.yml"
    delete file "plugins/KhCore/roles.yml"
    download from "https://raw.githubusercontent.com/KickHolse/KhCore/main/files/roles" to file "plugins/KhCore/roles.yml"
  yaml "ks.core.roles" is loaded:
    unload yaml "ks.core.roles"
  load yaml "plugins/KhCore/roles.yml" as "ks.core.roles"
  text from "https://api.spigotmc.org/legacy/update.php?resource=86802" != "{@version}":
    send "[KhCore] &cYou are not using the latest version of skript." to console
